<!DOCTYPE html>

<!--
  COLLABORATORS:
  
-->
<html>

<head>
<meta content="text/html; charset=utf-8" http-equiv="Content-Type" />
<title>Checkerboard</title>

<!-- Load style sheets -->
<link rel="stylesheet" type="text/css" href="mainLayout.css" />

<!-- Load any supplemental Javascript libraries here -->
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js"></script>
<script type="text/javascript" src="checker.js"></script>
<script type="text/javascript" src="boardEvent.js"></script>
<script type="text/javascript" src="board.js"></script>
<script type="text/javascript" src="rules.js"></script>
<script type="text/javascript" src="dragHandler.js"></script>

<script type="text/javascript">

//This script extracts parameters from the URL
//from jquery-howto.blogspot.com

    $.extend({
        getUrlVars : function() {
            var vars = [], hash;
            var hashes = window.location.href.slice(
                    window.location.href.indexOf('?') + 1).split('&');
            for ( var i = 0; i < hashes.length; i++) {
                hash = hashes[i].split('=');
                vars.push(hash[0]);
                vars[hash[0]] = hash[1];
            }
            return vars;
        },
        getUrlVar : function(name) {
            return $.getUrlVars()[name];
        }
    });

    var DEFAULT_BOARD_SIZE = 8;

    //data model
    var board;
    var rules;
    var whoseTurn = "black";
	var ramifications = [];
	var lastCheckers = [];
	var pointer = -1;	
	var doing;
	
    var directionOf = function(color) {
      if (color == "black") {
        return -1;
      }
      return 1;
    }

    // Fill in this function to toggle the display for whose turn
    // The color parameter should be either "black" or "red"
    var toggleTurn = function(color) {
	// Your code here
		if (color == "red") {
			whoseTurn = "black";
		}
		else if (color == "black") {
			whoseTurn = "red";
		}
		
		var div = document.getElementById("lblWhoseTurn");
		div.textContent = whoseTurn.charAt(0).toUpperCase() + whoseTurn.slice(1) + " Turn";
		div.style.backgroundColor = whoseTurn;
    }



    // This allows the Javascript code inside this block to only run when the page
    // has finished loading in the browser.
    $(document).ready(function() {

        if ($.getUrlVar('size') && $.getUrlVar('size') >= 6) {
            board = new Board($.getUrlVar('size'));
        } else {
            board = new Board(DEFAULT_BOARD_SIZE);
        }

		rules = new Rules(board);

     	// Initial label
     	function resetTurn() {
     		whoseTurn = "black";
			var div = document.getElementById("lblWhoseTurn");
			div.textContent = whoseTurn.charAt(0).toUpperCase() + whoseTurn.slice(1) + " Turn";
			div.style.backgroundColor = whoseTurn;		
     	}
		
		// Checker drawing function
		function drawCheckers() {
			var checkers = board.getAllCheckers();
			
			for (var c in checkers) {
				var img = document.createElement("img");
				
				img.style.position = "absolute";
				img.style.zIndex = 1;
				img.style.left = checkers[c].col*(400/board.size()) + "px";
				img.style.top = checkers[c].row*(400/board.size()) + "px";
				img.style.width = 400/board.size() + "px"; 
				img.style.height = 400/board.size() + "px";

				img.draggable = "true";
				img.id = "checker" + checkers[c].row + "x" + checkers[c].col;
				
				var color = checkers[c].color;
				var suffix = "piece";
				
				if (checkers[c].isKing) {
					suffix = "king";
				}
				
				img.src = "./graphics/" + color + "-" + suffix + ".png";
				img.alt = checkers[c].toString();

				var canvasDiv = document.getElementById("canvasDiv");
				canvasDiv.parentNode.insertBefore(img, canvasDiv);
			}
		}
		
		// Helper variables
		var mouseOffset = null;
		var dragObject = null;
		var dragChecker = null;
		var onBoardRow = null;
		var onBoardCol = null;

		
		var dragDrops = [];
		var curTarget = null;
		var lastTraget = null;
		var dragHelper = null;
		var tempDiv = null;
		var rootParent = null;
		var rootSibling = null;
		
		// Helper mouse functions
		
		// Gives mouse coordinates
		function mouseCoords(ev) { 
		    if (ev.pageX || ev.pageY) { 
		        return {x:ev.pageX, y:ev.pageY}; 
		    } 
		    return { 
		        x:ev.clientX + document.body.scrollLeft - document.body.clientLeft, 
		        y:ev.clientY + document.body.scrollTop  - document.body.clientTop 
		    }; 
		} 
		
		// Gets offset
		function getMouseOffset(target, ev) { 
		    ev = ev || window.event; 
		    var docPos = getPosition(target); 
		    var mousePos = mouseCoords(ev); 
		    return {x:mousePos.x - docPos.x, y:mousePos.y - docPos.y}; 
		} 
		
		// Gets position
		function getPosition(e) { 
		    var left = 0; 
		    var top  = 0; 
		    while (e.offsetParent) { 
		        left += e.offsetLeft; 
		        top  += e.offsetTop; 
		        e = e.offsetParent; 
		    } 
		    left += e.offsetLeft; 
		    top  += e.offsetTop; 
		    return {x:left, y:top}; 
		}
		
		// Mousedown + mouseup
		$(document).mousedown(function(e) {

			mouseOffset = getMouseOffset(document.getElementById("canvas"), e);

			var x = mouseOffset["x"];
			var y = mouseOffset["y"];

			var row = Math.ceil(y/(400/board.size()) - 1);
			var col = Math.ceil(x/(400/board.size()) - 1);			
			
			if (!board.isEmptyLocation(row, col)) {
				
				dragObject = e.target || e.srcElement;
				dragChecker = board.getCheckerAt(row, col);
				//console.log(dragObject);
				//console.log("down" + row + "X" + col);
				
			}
			
			return false;
			
		}).mouseup(function (e) {
			
			mouseOffset = getMouseOffset(document.getElementById("canvasDiv"), e);
			
			var x = mouseOffset["x"];
			var y = mouseOffset["y"];
			
			var row = Math.ceil(y/(400/board.size()) - 1);
			var col = Math.ceil(x/(400/board.size()) - 1);
			
			var playerDirection = getDirectionNumber(dragChecker.color);
			
			var turnDirection = getDirectionNumber(whoseTurn);
 
			//console.log("makemove" + dragChecker + "..." + turnDirection + "..." + playerDirection);
			
			if (isOnBoard(row, col)) {
				var ramification = rules.makeMove(dragChecker, turnDirection, playerDirection, row, col);
				
				//board.moveTo(dragChecker, row, col);
				//console.log("HEEEEREeeeeeeeeeeeeeeeeeeeeee" + ramif + dragChecker.row + "X" + dragChecker.col);
				if (ramification) {
					ramifications.push(ramification);
					console.log("rammmmmmmmmmm", ramifications);
					lastCheckers.push(dragChecker);
					pointer++;
				
					
					toggleTurn(whoseTurn);
					eraseCheckers();
					drawCheckers();
					if (doing) {
						ramifications = ramifications.slice(0, pointer + 1);
	           			lastCheckers = lastCheckers.slice(0, pointer + 1);
	           			doing = false;
	           		}
				}
			}	

			dragObject = null;
			dragChecker = null;
			//console.log("up" + row + "X" + col);

			
		});
		
		$(document).mousemove(function (e) {
			
			mouseOffset = getMouseOffset(document.getElementById("canvasDiv"), e);
			
			var x = mouseOffset["x"];
			var y = mouseOffset["y"];
			
			var row = Math.ceil(y/(400/board.size()) - 1);
			var col = Math.ceil(x/(400/board.size()) - 1);
			
			if (isOnBoard(row, col)) {
				onBoardRow = row;
				onBoardCol = col;
			}
			
			//console.log("move" + row + "X" + col);
			//console.log("Lastmove" + onBoardRow + "X" + onBoardCol);
		});
		

		function isOnBoard(row, col) {
			return ((row >= 0 && row <= 7) && (col >= 0 && col <= 7))
		}
		//	Number.prototype.NaN0 = function() {return isNaN(this) ? 0 : this;}

		function getDirectionNumber(color) {
			if (color == "red") {
				return 1;
			}
			else if (color == "black") {
				return -1;
			}
			return null;
		}

		function getDirectionColor(number) {
			if (number == 1) {
				return "red";
			}
			else if (number == -1) {
				return "black";
			}
			return null;
		}		
		
		function redo() {

							console.log("~~~~REDO", ramifications, lastCheckers, pointer);
			if (pointer < lastCheckers.length - 1) {
				doing = true;
			pointer++;
				var fromCol = ramifications[pointer]["to_col"];
				var fromRow = ramifications[pointer]["to_row"];
			
				board.moveTo(lastCheckers[pointer], fromRow, fromCol);
				toggleTurn(whoseTurn);
				
				eraseCheckers();
				drawCheckers();	
			}
		}
		
		function undo() {
										console.log("~~~~UNDO", ramifications, lastCheckers, pointer);

			if (pointer >= 0) {
				doing = true;
				var fromCol = ramifications[pointer]["from_col"];
				var fromRow = ramifications[pointer]["from_row"];
				console.log(fromCol + "X" + fromRow);
				board.moveTo(lastCheckers[pointer], fromRow, fromCol);
				
				toggleTurn(whoseTurn);
				pointer--;
				eraseCheckers();
				drawCheckers();				
			}
		}
		
		/*function mouseMove(ev) { 
			if (isMouseDown) {
			    ev = ev || window.event; 
			    var target = ev.target || ev.srcElement;
			    var mousePos = mouseCoords(ev);
			    if (dragObject) { 
			    	//alert(dragObject.alt);
			        dragObject.style.position = 'absolute'; 
			        dragObject.style.top      = mousePos.y - mouseOffset.y; 
			        dragObject.style.left     = mousePos.x - mouseOffset.x; 
			        drawCheckers();
			        return false; 
			    } 
			}
		} */
		

		
		// Erase checkers function
		function eraseCheckers() {
			var container = document.getElementById("container");
			while (container.firstChild) {
				if (container.firstChild.id != "canvasDiv") {
					container.removeChild(container.firstChild);
				}
				else {
					break;
				}
			}
		}
		
		// Clear arrow function
		function eraseArrow() {
			var arrow = document.getElementById("arrow");
			
			if (arrow.getContext) {
				var ctx = arrow.getContext("2d");
				ctx.clearRect(0,0,arrow.width,arrow.height);
			}
		}
		
		// Draw arrow function
		function drawArrow(fromRow, fromCol, toRow, toCol) {
			var arrowDiv = document.getElementById("arrowDiv");
			var arrow = document.getElementById("arrow");
			
			var hypotenuse = Math.sqrt(2)*400/board.size();
			var quarter = 400*0.25/board.size();
			var half = 400*0.5/board.size();
			var full = 400/board.size();
			
			if (arrow.getContext) {
				var ctx = arrow.getContext("2d");
				
				ctx.clearRect(0,0,arrow.width,arrow.height);
				
				ctx.strokeStyle = "#FFFC17";
				ctx.fillStyle = "#FFFC17";
				ctx.lineWidth = quarter/2;
				
				var x0 = fromCol*full + half;
				var y0 = fromRow*full + half;
				var x1 = toCol*full + half;
				var y1 = toRow*full + half;
				
				ctx.beginPath();
				ctx.moveTo(x0, y0);
				ctx.lineTo(x1, y1);
				ctx.stroke();
				
				ctx.beginPath();
				ctx.moveTo(x1, y1);
				
				var signX = 1;
				if (x1 - x0 < 0) {
					signX = -1;
				}
				
				var signY = 1;
				if (y1 - y0 < 0) {
					signY = -1;
				}
				
				if (toCol == fromCol) {
					ctx.lineTo(x1 - signX*quarter/Math.sqrt(2), y1 - signY*quarter/Math.sqrt(2));
					ctx.lineTo(x1 - signX*quarter + 2*signX*quarter, y1 - signY*quarter/Math.sqrt(2));
					ctx.closePath();
					ctx.stroke();
					ctx.fill();
				} else {
					ctx.lineTo(x1 - signX*quarter, y1);
					ctx.lineTo(x1, y1 - signY*quarter);
					ctx.closePath();
					ctx.stroke();
					ctx.fill();
				}
			}
		}
		
		// Board drawing function
		function drawBoard() {
			var canvas = document.getElementById("canvas");
			if (canvas.getContext) {
				var ctx = canvas.getContext("2d");
				
				var x = 400/board.size(); 
				var y = 400/board.size();
				var color;
				for (i = 0; i < board.size(); i=i+1) {
					for (j = 0; j < board.size(); j=j+1) {
						if ((i + j) % 2 == 0) {
							color = "rgb(255,255,255)"
						}
						else {
							color = "rgb(211,211,211)"
						}
						ctx.fillStyle = color;
						ctx.fillRect(i*x, j*y, x, y);
					}
				}				
			}
		}


        board.addEventListener('add',function (e) {
    		// Your code here
    	},true);

    	board.addEventListener('move',function (e) {
    		// Your code here
    		var fromRow = e.details["fromRow"];
    		var fromCol = e.details["fromCol"];
    		var toRow = e.details["toRow"];
    		var toCol = e.details["toCol"];
    		drawArrow(fromRow, fromCol, toRow, toCol);
    	},true);

        board.addEventListener('remove', function(e) {
        	// Your code here
        }, true);

        board.addEventListener('promote',function (e) {
    		// Your code here
    	},true);

        
        $("#btnNewGame").click(function(evt) {
            board.prepareNewGame();
			eraseCheckers();
			drawCheckers();
			resetTurn();
			eraseArrow();
        });

        $("#btnAutoMove").click(function(evt) {
          var playerColor = whoseTurn;
          var playerDirection = directionOf(playerColor);
          var result = rules.makeRandomMove(playerColor, playerDirection);
          if (result != null) {
          	ramifications.push(result);
          	lastCheckers.push(board.getCheckerAt(result["to_row"], result["to_col"]));
            console.log(board.getCheckerAt(result["to_row"], result["to_col"]));
            toggleTurn(playerColor);
            eraseCheckers();
            drawCheckers();
            pointer++;
            if (doing) {
	            ramifications = ramifications.slice(0, pointer + 1);
	            lastCheckers = lastCheckers.slice(0, pointer + 1);
	            doing = false;
	        }
          }
        });

        $("#btnUndo").click(function(evt) {
        	//console.log("HEEEEEEE");
			undo();
        });

        $("#btnRedo").click(function(evt) {
			redo();
        });

        board.prepareNewGame();
		drawBoard();
		drawCheckers();
		resetTurn();
    });

</script>


</head>

<body>

<table id="mainTable">
    <tr>
        <td id="navigation">
        	<table>
				<tr><td><div id="lblWhoseTurn" align="center" style="color:white"></div></td></tr>
	            <tr><td><input id="btnNewGame" type="button" name="new" value="New Game"/></td></tr>
	            <tr><td><input id="btnAutoMove" type="button" name="new" value="Auto Move"/></td></tr>
				<tr><td><input id="btnUndo" type="button" name="new" value="Undo"/></td></tr>
				<tr><td><input id="btnRedo" type="button" name="new" value="Redo"/></td></tr>
            </table>
        </td>

        <td id="content">
        	
			<div id="container" style="position:relative; left:0px; top:0px; height:400px; width:400px;">
	            
	            <div id="canvasDiv" style="position:relative; z-index:0; left:0px; top:0px; width:400px; height:400px">           	
	            	<canvas id="canvas" width="400" height="400"></canvas>
	            </div>
				
				<div id="arrowDiv" style="position:absolute; z-index:2; left:0px; top:0px; width:400px; height:400px">
					<canvas id="arrow" width="400" height="400"></canvas>
				</div>
				
				<!--<div id="dragDiv" style="position:absolute; z-index:2; left:0px; top:0px; width:400px; height:400px">           	
	            	<canvas id="canvas" width="400" height="400"></canvas>
	      </div>-->
	        	
    		</div> 
    		      
        </td>
    </tr>

</table>

</body>

</html>
